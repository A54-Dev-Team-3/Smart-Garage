@model VisitViewModel

@{
    var partsCounter = 0;
    var serviceCounter = 0;
}

<style>
    .InputReadOnly {
        background-color: #f8f9fa;
    }
</style>

<h2 style="margin-bottom:30px;">@ViewData["Heading"]</h2>

<p style="margin-bottom:30px;">Date: @DateTime.Now.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture)</p>

<div style="margin-left: 0%; margin-bottom:2%">
    <p style="display: inline-block;" for="currency">Select Currency:</p>
    <select id="currency" class="form-control" style="max-width:60px; display: inline-block;">
        <option value="1">BGN</option> <!-- Bulgarian Lev -->
        <option value="0.55">USD</option> <!-- US Dollar -->
        <option value="0.51">EUR</option> <!-- Euro -->
    </select>
</div>

<div style="display: flex; width: 225%;">

    <span style="flex: 1;">

        <h4 style="margin-bottom: 20px; display: flex; align-items: center;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                directions_car
            </span>
            Vehicle
        </h4>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="Vehicle.LicensePlate">License Plate</label>
            <input id="licensePlateInput" asp-for="Vehicle.LicensePlate" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="Vehicle.VIN">VIN</label>
            <input asp-for="Vehicle.VIN" type="number" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="Vehicle.Brand">Brand</label>
            @if ((string)ViewData["Action"] == "CreateVisitForNewCustomer")
            {
                <select asp-for="Vehicle.Brand" class="form-control" name="Vehicle.Brand" id="brandSelect">
                    <option value=""></option>
                    @foreach (var brand in Model.Brands)
                    {
                        <option value="@brand.Name">@brand.Name</option>
                    }
                </select>
            }
            else
            {
                <input asp-for="Vehicle.Brand" type="text" class="form-control InputReadOnly" readonly="@ViewData["IsReadOnly"]">
            }
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="Vehicle.Model">Model</label>
            @if ((string)ViewData["Action"] == "CreateVisitForNewCustomer")
            {
                <select type="text" class="form-control" id="modelSelect" name="Vehicle.Model">
                    <option value=""></option>
                </select>
            }
            else
            {
                <input asp-for="Vehicle.Model" type="text" class="form-control InputReadOnly" readonly="@ViewData["IsReadOnly"]">
            }
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="Vehicle.CreationYear">Creation Year</label>
            <input asp-for="Vehicle.CreationYear" type="number" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>
    </span>

    <span style="flex: 1; margin-left:30px;">

        <h4 style="margin-bottom: 20px; display: flex; align-items: center;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                person
            </span>
            Owner
        </h4>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="User.Username">Username</label>
            <input asp-for="User.Username" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="User.FirstName">First Name</label>
            <input asp-for="User.FirstName" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="User.LastName">Last Name</label>
            <input asp-for="User.LastName" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="User.Email">Email</label>
            <input asp-for="User.Email" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>

        <div class="form-groupel" style="margin-bottom: 15px">
            <label asp-for="User.PhoneNumber">Phone Number</label>
            <input asp-for="User.PhoneNumber" type="number" min="10" max="10" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
        </div>
    </span>

</div>

<div style="margin-left:-30px">
    <form asp-controller="Admin_Visits" asp-action="@ViewData["Action"]" id="addItemForm">

        <!-- Table for Parts -->
        <h4 style="margin-bottom: 20px; display: flex; align-items: center; margin-top:30px; margin-left: 30px;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                package_2
            </span>
            Parts
        </h4>

        <table class="table" style="width:180%; margin-left:30px">
            <thead>
                <tr>
                    <th scope="col" style="width: 60%">Name</th>
                    <th scope="col" style="width: 10%">Quantity</th>
                    <th scope="col" style="width: 16%">Unit Price (лв)</th>
                    <th scope="col" style="width: 23%">Price (лв)</th>
                    <th scope="col"></th> <!-- Empty cell for delete button -->
                </tr>
            </thead>
            <tbody id="itemTableBody">
                @foreach (var serviceInstance in Model.ServiceInstances)
                {

                    <tr>
                        <input name="ServiceInstances[@partsCounter].Part.Id" type="hidden" value="@serviceInstance.Part.Id">


                        <td>
                            <select type="text" class="form-control" name="ServiceInstances[@partsCounter].Part.Name" value="@serviceInstance.Part.Name">
                                @foreach (var part in Model.Parts)
                                {
                                    if (part.Name == serviceInstance.Part.Name)
                                    {
                                        <option value="@part.Name" selected>@part.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@part.Name">@part.Name</option>
                                    }
                                }
                            </select>
                        </td>
                        <td><input type="number" class="form-control" name="ServiceInstances[@partsCounter].PartQuantity" min="1" step="1" value="@serviceInstance.PartQuantity" /></td>
                        <td><input type="number" class="form-control item-unit-price" min="0" step="0.01" onblur="calculateTotalPrice()" name="ServiceInstances[@partsCounter].PartUnitPrice" min="1" step="0.01" value="@serviceInstance.PartUnitPrice" /></td>
                        <td><input type="number" class="form-control item-price" min="0" step="0.01" onblur="calculateTotalPrice()" min="1" step="0.01" name="PartPrice @partsCounter" value="@serviceInstance.PartUnitPrice * @serviceInstance.PartQuantity" readonly style="background-color: #f8f9fa" /></td>

                        <td>
                            <button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red" onclick="deleteRow(this); calculateTotalPrice(); calculateCombinedTotalPrice();">
                                Delete
                            </button>
                        </td>
                    </tr>
                    partsCounter++;
                }
            </tbody>
        </table>

        <div style="display: flex; align-items: center; width:1000px">
            <div style="margin-left: 30px;">
                <button type="button" class="btn btn-primary" id="addItemBtn">Add Item</button>
            </div>
            <div style="margin-left: auto; margin-right: 30px;">
                <p style="margin-top: 5px; display: flex; align-items: center;">Total Parts Price: <span id="totalPrice" style="margin-left: 5px;">0.00</span> лв.</p>
            </div>
        </div>

        <div style="margin-top:50px"></div>

        <!-- Table for Services -->
        <h4 style="margin-bottom: 20px; display: flex; align-items: center; margin-top:30px; margin-left: 30px;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                construction
            </span>
            Service
        </h4>

        <table class="table" style="width:180%; margin-left:30px">
            <thead>
                <tr>
                    <th scope="col" style="width: 50%">Name</th>
                    <th scope="col" style="width: 25%">Mechanic</th>
                    <th scope="col" style="width: 15%">Price (лв)</th>
                    <th scope="col"></th> <!-- Empty cell for delete button -->
                </tr>
            </thead>
            <tbody id="serviceTableBody">
                @foreach (var serviceInstance in Model.ServiceInstances)
                {
                    <tr>

                        <input name="ServiceInstances[@serviceCounter].Service.Id" type="hidden" value="@serviceInstance.Service.Id">

                        <td>
                            <select type="text" class="form-control" name="ServiceInstances[@serviceCounter].Service.Name" value="@serviceInstance.Service.Name">
                                @foreach (var service in Model.Services)
                                {
                                    if (service.Name == serviceInstance.Service.Name)
                                    {
                                        <option value="@service.Name" selected>@service.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@service.Name">@service.Name</option>
                                    }
                                }
                            </select>
                        </td>

                        <input name="ServiceInstances[@serviceCounter].Mechanic.Id" type="hidden" value="@serviceInstance.Mechanic.Id">

                        <td>
                            <select type="text" class="form-control" name="ServiceInstances[@serviceCounter].Mechanic.Name" value="@serviceInstance.Mechanic.Name">
                                @foreach (var mechanic in Model.Mechanics)
                                {
                                    if (mechanic.Name == serviceInstance.Mechanic.Name)
                                    {
                                        <option value="@mechanic.Name" selected>@mechanic.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@mechanic.Name">@mechanic.Name</option>
                                    }
                                }
                            </select>
                        </td>

                        <td>
                            <input type="number" class="form-control service-price" name="ServiceInstances[@serviceCounter].ServicePrice" value="@serviceInstance.ServicePrice" min="0" step="0.01" onblur="calculateTotalServicePrice()" />
                        </td>

                        <td>
                            <button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red" onclick="deleteRow(this); calculateTotalPrice(); calculateCombinedTotalPrice();">
                                Delete
                            </button>
                        </td>
                    </tr>

                    serviceCounter++;
                }
            </tbody>
        </table>

        <div style="display: flex; align-items: center; width:1000px">
            <div style="margin-left: 30px;">
                <button type="button" class="btn btn-primary" id="addServiceBtn">Add Service</button>
            </div>
            <div style="margin-left: auto; margin-right: 30px;">
                <p style="margin-top: 5px; display: flex; align-items: center;">Total Services Price: <span id="totalServicePrice" style="margin-left: 5px;">0.00</span> лв.</p>
            </div>
        </div>


        <div style="display: flex; align-items: center; margin-top:70px">
            <!-- Add a new p tag for displaying the combined total price -->
            <div style="margin-left: 30px;">
                <p style="margin-top: 7px; display: inline;">Combined Total Price: <span id="combinedTotalPrice">0.00</span> лв.</p>
            </div>
        </div>

        <button style="margin-left:30px; margin-top:20px; display:block" type="submit" class="btn btn-primary">Save</button>

        <input asp-for="@Model.Id" type="hidden" value="@Model.Id">
        <input name="PartsTotalPrice" type="hidden" value="@Model.PartsTotalPrice">
        <input name="ServicesTotalPrice" type="hidden" value="@Model.ServicesTotalPrice">
        <input name="TotalPrice" type="hidden" value="@Model.TotalPrice">

    </form>
</div>

<script>
    $(document).ready(function () {
        // Listen for keypress event on the input field
        $('#licensePlateInput').keypress(function (event) {
            // Check if the pressed key is 'Enter' (key code 13)
            if (event.which === 13) {
                // Prevent the default form submission behavior
                event.preventDefault();
                return false; // Stop the event propagation
            }
        });

        // Listen for change event on the currency select element
        $('#currency').change(function () {
            updatePrices();
        });

        // Function to update prices based on the selected currency
        function updatePrices() {
            var currencyRate = parseFloat($('#currency').val());
            var partsRows = document.querySelectorAll('#itemTableBody tr');
            partsRows.forEach(function (row, index) {
                var unitPrice = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartUnitPrice"]').value) || 0;
                var quantity = parseInt(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartQuantity"]').value) || 0;
                var totalPrice = unitPrice * quantity * currencyRate;
                row.querySelector('.form-control[name="PartPrice ' + index + '"]').value = totalPrice.toFixed(2);
            });

            var serviceRows = document.querySelectorAll('#serviceTableBody tr');
            serviceRows.forEach(function (row, index) {
                var price = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value) || 0;
                var totalPrice = price * currencyRate;
                row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value = totalPrice.toFixed(2);
            });

            // Recalculate total prices
            calculateTotalPrice();
            calculateTotalServicePrice();
            calculateCombinedTotalPrice();
        }

        // Call updatePrices initially
        updatePrices();
    });
</script>

<script>
    // Function to handle adding rows for items
    function addItemRow() {

        var partsData = @Html.Raw(Json.Serialize(Model.Parts));

        var itemName = document.createElement('select');
        itemName.setAttribute('class', 'form-control');
        itemName.setAttribute('name', 'ServiceInstances[@partsCounter].Part.Name');

        var defaultOption = document.createElement('option');
        defaultOption.value = ""; // Set the value to an empty string or any appropriate value
        defaultOption.text = "";
        itemName.appendChild(defaultOption);

        partsData.forEach(function (part) {
            var option = document.createElement('option');
            option.value = part.name; // Set the value attribute to the part's name
            option.text = part.name; // Set the text content of the option to the part's name
            itemName.appendChild(option); // Append the option to the select element
        });

        var itemQuantity = document.createElement('input');
        itemQuantity.setAttribute('type', 'number');
        itemQuantity.setAttribute('class', 'form-control');
        itemQuantity.setAttribute('name', 'ServiceInstances[@partsCounter].PartQuantity');
        itemQuantity.setAttribute('min', '1');
        itemQuantity.setAttribute('step', '1');
        itemQuantity.value = '1';

        var itemUnitPrice = document.createElement('input');
        itemUnitPrice.setAttribute('type', 'number');
        itemUnitPrice.setAttribute('class', 'form-control item-unit-price');
        itemUnitPrice.setAttribute('name', 'ServiceInstances[@partsCounter].PartUnitPrice');
        itemUnitPrice.setAttribute('min', '0');
        itemUnitPrice.setAttribute('step', '0.01');
        itemUnitPrice.addEventListener('blur', calculateTotalPrice);

        itemName.addEventListener('change', function () {
            var selectedOption = this.options[this.selectedIndex].text;
            partsData.forEach(function (part) {
                if (selectedOption == part.name) {
                    itemUnitPrice.value = part.UnitPrice;
                }
            });
        });

        // Append itemName, itemQuantity, and itemUnitPrice to your form or container

        var itemPrice = document.createElement('input');
        itemPrice.setAttribute('type', 'number');
        itemPrice.setAttribute('class', 'form-control item-price');
        itemPrice.setAttribute('name', 'PartPrice @partsCounter');
        itemPrice.setAttribute('min', '0');
        itemPrice.setAttribute('step', '0.01');
        itemPrice.setAttribute('readonly', 'true');
        itemPrice.style.backgroundColor = '#f8f9fa';
        itemPrice.addEventListener('blur', calculateTotalPrice);

        var deleteBtn = document.createElement('button');
        deleteBtn.setAttribute('type', 'button');
        deleteBtn.setAttribute('class', 'btn btn-danger delete-row');
        deleteBtn.textContent = 'Delete';
        deleteBtn.style.color = 'white';
        deleteBtn.style.backgroundColor = 'red';
        deleteBtn.addEventListener('click', function () {
            deleteRow(this);
            // partsCounter--;
            calculateTotalPrice();
            calculateCombinedTotalPrice();
        });

        var newRow = document.createElement('tr');
        var cell1 = newRow.insertCell(0);
        var cell2 = newRow.insertCell(1);
        var cell3 = newRow.insertCell(2);
        var cell4 = newRow.insertCell(3);
        var cell5 = newRow.insertCell(4);

        cell1.appendChild(itemName);
        cell2.appendChild(itemQuantity);
        cell3.appendChild(itemUnitPrice);
        cell4.appendChild(itemPrice);
        cell5.appendChild(deleteBtn);

        document.getElementById('itemTableBody').appendChild(newRow);
        calculateTotalPrice();

    @{
        partsCounter++;
    }
            console.log("Hi", @partsCounter);
    }

    // Adding event listener to the Add Item button
    document.getElementById('addItemBtn').addEventListener('click', function () {
        addItemRow();
    });

    // Function to calculate total price of items
    function calculateTotalPrice() {
        var totalPrice = 0;
        var itemRows = document.querySelectorAll('#itemTableBody tr');
        itemRows.forEach(function (row, index) {

            var quantity = parseInt(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartQuantity"]').value) || 0;
            var unitPrice = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartUnitPrice"]').value) || 0;
            var price = quantity * unitPrice;
            row.querySelector('.form-control[name="PartPrice ' + index + '"]').value = price.toFixed(2);
            totalPrice += price;
        });
        document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
        document.querySelector('input[name="PartsTotalPrice"]').value = totalPrice.toFixed(2);

        calculateCombinedTotalPrice();
    }

    // Function to calculate and display the combined total price of items and services
    function calculateCombinedTotalPrice() {
        var totalItemsPrice = parseFloat(document.getElementById('totalPrice').textContent) || 0;
        var totalServicesPrice = parseFloat(document.getElementById('totalServicePrice').textContent) || 0;
        var combinedTotalPrice = totalItemsPrice + totalServicesPrice;
        document.getElementById('combinedTotalPrice').textContent = combinedTotalPrice.toFixed(2);
        document.querySelector('input[name="TotalPrice"]').value = combinedTotalPrice.toFixed(2);
    }

    // Call the function initially to display the combined total price
    calculateCombinedTotalPrice();

    // Function to handle deleting rows
    function deleteRow(btn) {
        var row = btn.closest('tr');
        row.remove();
    }

    // Adding event listener to dynamically created delete buttons
    document.addEventListener('click', function (event) {
        if (event.target.classList.contains('delete-row')) {
            deleteRow(event.target);
            calculateTotalPrice();
            calculateCombinedTotalPrice();
        } else {
            // Calculate totals when clicking away from input fields
            if (event.target.nodeName !== 'INPUT') {
                calculateTotalPrice();
                calculateCombinedTotalPrice();
            }
        }
    });
</script>

<script>
    // Function to handle adding rows for services
    function addServiceRow() {

        var serviceData = @Html.Raw(Json.Serialize(Model.Services));

        var serviceName = document.createElement('select');
        serviceName.setAttribute('type', 'text');
        serviceName.setAttribute('class', 'form-control');
        serviceName.setAttribute('name', 'ServiceInstances[@serviceCounter].Service.Name');

        var defaultOption = document.createElement('option');
        defaultOption.value = ""; // Set the value to an empty string or any appropriate value
        defaultOption.text = "";
        serviceName.appendChild(defaultOption);

        serviceData.forEach(function (service) {
            var option = document.createElement('option');
            option.value = service.name;
            option.text = service.name;
            serviceName.appendChild(option);
        });

        var mechanicData = @Html.Raw(Json.Serialize(Model.Mechanics));

        var serviceMechanic = document.createElement('select');
        serviceMechanic.setAttribute('type', 'text');
        serviceMechanic.setAttribute('class', 'form-control');
        serviceMechanic.setAttribute('name', 'ServiceInstances[@serviceCounter].Mechanic.Name');

        var defaultOption = document.createElement('option');
        defaultOption.value = ""; // Set the value to an empty string or any appropriate value
        defaultOption.text = "";
        serviceMechanic.appendChild(defaultOption);

        mechanicData.forEach(function (mechanic) {
            var option = document.createElement('option');
            option.value = mechanic.name;
            option.text = mechanic.name;
            serviceMechanic.appendChild(option);
        });

        var servicePrice = document.createElement('input');
        servicePrice.setAttribute('type', 'number');
        servicePrice.setAttribute('class', 'form-control service-price'); // Add class for price calculation
        servicePrice.setAttribute('name', 'ServiceInstances[@serviceCounter].ServicePrice');
        servicePrice.setAttribute('min', '0');
        servicePrice.setAttribute('step', '0.01');
        servicePrice.addEventListener('blur', calculateTotalServicePrice); // Add blur event listener to servicePrice input

        var deleteBtn = document.createElement('button');
        deleteBtn.setAttribute('type', 'button');
        deleteBtn.setAttribute('class', 'btn btn-danger delete-row');
        deleteBtn.textContent = 'Delete';
        deleteBtn.style.color = 'white';
        deleteBtn.style.backgroundColor = 'red';
        deleteBtn.addEventListener('click', function () {
            deleteRow(this);
            // serviceCounter--;
            calculateTotalServicePrice();
            calculateCombinedTotalPrice();
        });

        var newRow = document.createElement('tr');
        var cell1 = newRow.insertCell(0);
        var cell2 = newRow.insertCell(1);
        var cell3 = newRow.insertCell(2);
        var cell4 = newRow.insertCell(3);

        cell1.appendChild(serviceName);
        cell2.appendChild(serviceMechanic);
        cell3.appendChild(servicePrice);
        cell4.appendChild(deleteBtn);

        document.getElementById('serviceTableBody').appendChild(newRow);
        calculateTotalServicePrice(); // Update total service price when row is added

        serviceCounter++;
    }

    // Adding event listener to the Add Service button
    document.getElementById('addServiceBtn').addEventListener('click', function () {
        addServiceRow();
    });

    // Function to calculate total price of services
    function calculateTotalServicePrice() {
        var totalServicePrice = 0;
        var serviceRows = document.querySelectorAll('#serviceTableBody tr');
        serviceRows.forEach(function (row, index) {
            //ServiceInstances[@serviceCounter].ServicePrice
            var price = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value) || 0;
            totalServicePrice += price;
        });
        document.getElementById('totalServicePrice').textContent = totalServicePrice.toFixed(2); // Display total service price
        document.querySelector('input[name="ServicesTotalPrice"]').value = totalServicePrice.toFixed(2);

        calculateCombinedTotalPrice(); // Recalculate combined total price
    }

    // Function to handle deleting rows
    function deleteRow(btn) {
        var row = btn.closest('tr');
        row.remove();
    }

    document.addEventListener('DOMContentLoaded', function () {
        calculateTotalServicePrice();
        calculateTotalPrice();
        calculateCombinedTotalPrice();
    });

    document.addEventListener('click', function (event) {
        if (event.target.classList.contains('delete-row')) {
            deleteRow(event.target);
            calculateTotalServicePrice();
            calculateCombinedTotalPrice();
        } else {
            // Calculate totals when clicking away from input fields
            if (event.target.nodeName !== 'INPUT') {
                calculateTotalServicePrice();
                calculateCombinedTotalPrice();
            }
        }
    });
</script>


<script>
    var brandData = @Html.Raw(Json.Serialize(Model.Brands));

    console.log(brandData);

    document.addEventListener('DOMContentLoaded', function () {
        var brandSelect = document.getElementById('brandSelect');
        var modelSelect = document.getElementById('modelSelect');

        brandSelect.addEventListener('change', function () {
            chosenBrand = this.value; // Update chosenBrand variable with the selected value

            modelSelect.innerHTML = '';

            if (brandData && brandData.length > 0) {

                var defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.textContent = "";
                modelSelect.appendChild(defaultOption);

                brandData.forEach(function (brand) {
                    if (brand.name == chosenBrand) {
                        brand.models.forEach(function (model) {
                            var option = document.createElement('option');
                            option.value = model.name;
                            option.textContent = model.name;
                            modelSelect.appendChild(option);
                        });
                    }
                });
            }
        });
    });
</script>
