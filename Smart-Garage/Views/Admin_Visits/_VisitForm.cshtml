@model VisitViewModel

<style>
    .InputReadOnly {
        background-color: #f8f9fa;
    }
</style>

<h2 style="margin-bottom:30px;">@ViewData["Heading"]</h2>

<p style="margin-bottom:30px;">Date: @DateTime.Now.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture)</p>

<div style="margin-left: 0%; margin-bottom:2%">
    <p style="display: inline-block;" for="currency">Select Currency:</p>
    <select id="currency" class="form-control" style="max-width:60px; display: inline-block;">
        <option value="1">BGN</option> <!-- Bulgarian Lev -->
        <option value="0.55">USD</option> <!-- US Dollar -->
        <option value="0.51">EUR</option> <!-- Euro -->
    </select>
</div>

<form asp-controller="Admin_Visits" asp-action="@ViewData["Action"]" id="addItemForm">

    <div style="display: flex; width: 225%;">

        <span style="flex: 1;">

            <h4 style="margin-bottom: 20px; display: flex; align-items: center;">
                <span class="material-symbols-outlined" style="margin-right: 5px;">
                    directions_car
                </span>
                Vehicle
            </h4>

            <input asp-for="Vehicle.Id" type="hidden">

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="Vehicle.LicensePlate">License Plate</label>
                <input id="licensePlateInput" asp-for="Vehicle.LicensePlate" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="Vehicle.VIN">VIN</label>
                <input asp-for="Vehicle.VIN" type="number" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="Vehicle.Brand">Brand</label>
                @if ((string)ViewData["Action"] == "CreateVisitForNewCustomer")
                {
                    <select asp-for="Vehicle.Brand" class="form-control" name="Vehicle.Brand" id="brandSelect">
                        <option value=""></option>
                        @foreach (var brand in Model.Brands)
                        {
                            <option value="@brand.Name">@brand.Name</option>
                        }
                    </select>
                }
                else
                {
                    <input asp-for="Vehicle.Brand" type="text" class="form-control InputReadOnly" readonly="@ViewData["IsReadOnly"]">
                }
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="Vehicle.Model">Model</label>
                @if ((string)ViewData["Action"] == "CreateVisitForNewCustomer")
                {
                    <select type="text" class="form-control" id="modelSelect" name="Vehicle.Model">
                        <option value=""></option>
                    </select>
                }
                else
                {
                    <input asp-for="Vehicle.Model" type="text" class="form-control InputReadOnly" readonly="@ViewData["IsReadOnly"]">
                }
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="Vehicle.CreationYear">Creation Year</label>
                <input asp-for="Vehicle.CreationYear" type="number" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>
        </span>

        <span style="flex: 1; margin-left:30px;">

            <h4 style="margin-bottom: 20px; display: flex; align-items: center;">
                <span class="material-symbols-outlined" style="margin-right: 5px;">
                    person
                </span>
                Owner
            </h4>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="User.Username">Username</label>
                <input asp-for="User.Username" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="User.FirstName">First Name</label>
                <input asp-for="User.FirstName" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="User.LastName">Last Name</label>
                <input asp-for="User.LastName" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="User.Email">Email</label>
                <input asp-for="User.Email" type="text" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>

            <div class="form-groupel" style="margin-bottom: 15px">
                <label asp-for="User.PhoneNumber">Phone Number</label>
                <input asp-for="User.PhoneNumber" type="number" minlength="10" maxlength="10" class="form-control @(ViewData["IsReadOnly"] != null && (bool)ViewData["IsReadOnly"] ? "InputReadOnly" : "")" readonly="@ViewData["IsReadOnly"]">
            </div>
        </span>

    </div>

    <div style="margin-left:-30px">


        <!-- Table for Parts -->
        <h4 style="margin-bottom: 20px; display: flex; align-items: center; margin-top:30px; margin-left: 30px;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                package_2
            </span>
            Parts
        </h4>

        <table class="table" id="partSubmissionTable" style="width:180%; margin-left:30px">
            <thead>
                <tr>
                    <th scope="col" style="width: 60%">Name</th>
                    <th scope="col" style="width: 10%">Quantity</th>
                    <th scope="col" style="width: 16%">Unit Price (лв)</th>
                    <th scope="col" style="width: 23%">Price (лв)</th>
                    <th scope="col"></th> <!-- Empty cell for delete button -->
                </tr>
            </thead>
            <tbody id="partsTable">

                @* <tr id="partstablerow4">
                </tr> *@

            </tbody>
        </table>

        <div style="display: flex; align-items: center; width:1000px">
            <div style="margin-left: 30px;">
                <button type="button" class="btn btn-primary" id="addPart">Add Item</button>
            </div>
            <div style="margin-left: auto; margin-right: 30px;">
                <p style="margin-top: 5px; display: flex; align-items: center;">Total Parts Price: <span id="totalPrice" style="margin-left: 5px;">0.00</span> лв.</p>
            </div>
        </div>

        <div style="margin-top:50px"></div>

        <!-- Table for Services -->
        <h4 style="margin-bottom: 20px; display: flex; align-items: center; margin-top:30px; margin-left: 30px;">
            <span class="material-symbols-outlined" style="margin-right: 5px;">
                construction
            </span>
            Service
        </h4>

        <table class="table" id="serviceSubmissionTable" style="width:180%; margin-left:30px">
            <thead>
                <tr>
                    <th scope="col" style="width: 50%">Name</th>
                    <th scope="col" style="width: 25%">Mechanic</th>
                    <th scope="col" style="width: 15%">Price (лв)</th>
                    <th scope="col"></th> <!-- Empty cell for delete button -->
                </tr>
            </thead>
            <tbody id="serviceTableBody">

                @* <tr id="servicestablerow0">
                    </tr> *@
            </tbody>
        </table>

        <div style="display: flex; align-items: center; width:1000px">
            <div style="margin-left: 30px;">
                <button type="button" class="btn btn-primary" id="addServiceBtn">Add Service</button>
            </div>
            <div style="margin-left: auto; margin-right: 30px;">
                <p style="margin-top: 5px; display: flex; align-items: center;">Total Services Price: <span id="totalServicePrice" style="margin-left: 5px;">0.00</span> лв.</p>
            </div>
        </div>


        <div style="display: flex; align-items: center; margin-top:70px">
            <!-- Add a new p tag for displaying the combined total price -->
            <div style="margin-left: 30px;">
                <p style="margin-top: 7px; display: inline;">Combined Total Price: <span id="combinedTotalPrice">0.00</span> лв.</p>
            </div>
        </div>

        <button style="margin-left:30px; margin-top:20px; display:block" type="submit" class="btn btn-primary">Save</button>

        <input name="Date" type="hidden" value="@DateTime.Now">
        <input name="PartsTotalPrice" type="hidden" value="@Model.PartsTotalPrice">
        <input name="ServicesTotalPrice" type="hidden" value="@Model.ServicesTotalPrice">
        <input name="TotalPrice" type="hidden" value="@Model.TotalPrice">


    </div>

</form>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>


<script>

    $(document).ready(function () {

        var modelData = @Html.Raw(Json.Serialize(Model));
        fillTableWithData(modelData);

        $('#licensePlateInput').keypress(function (event) {

            if (event.which === 13) { // Enter
                event.preventDefault();
                return false;
            }
        });

        $('#currency').change(function () {
            updatePrices();
        });

        calculateTotalPartsPrice();
        calculateTotalServicePrice();
        // updatePrices(); // Call updatePrices initially
    });

    function removeTrFromPartsTable(index)
    {
        console.log("After: partsCounter", partsCounter);
        if (partsCounter >= 0) {
            $('#partstablerow' + index).remove();
            partsCounter--;
        }
        console.log("Before: partsCounter", partsCounter);
        calculateTotalPartsPrice();
        return false;
    }

    // Shift

    function removeTrFromServiceTable(index)
    {
        console.log("Before: serviceCounter", serviceCounter);
        if (serviceCounter >= 0) {
            $('#servicestablerow' + index).remove();
            serviceCounter--;
        }
        console.log("After: serviceCounter", serviceCounter);
        calculateTotalServicePrice();
        return false;
    }

    var partsCounter = 0;
    var serviceCounter = 0;

    function fillTableWithData(modelData) {
        if (modelData.serviceInstances.length != 0)
        {

            for (var i = 0; i < modelData.serviceInstances.length; i++)
            {
                if (modelData.serviceInstances[i].part != null)
                {
                    partsCounter++;
                }

                if (modelData.serviceInstances[i].service != null)
                {
                    serviceCounter++;
                }
            }

            // Parts
            for (var i = 0; i < partsCounter; i++) {
                var serviceInstance = modelData.serviceInstances[i];

                var partsTableRowHtml = '<tr id="partstablerow' + i + '">' +
                    '<td>' +
                    '<select type="text" class="form-control" name="ServiceInstances[' + i + '].Part.Name" required="required">';

                // Loop through the parts using JavaScript syntax
                for (var j = 0; j < modelData.parts.length; j++) {
                    var part = modelData.parts[j];
                    if (part.name == serviceInstance.part.name) {
                        partsTableRowHtml += '<option value="' + part.name + '" selected>' + part.name + '</option>';
                    } else {
                        partsTableRowHtml += '<option value="' + part.name + '">' + part.name + '</option>';
                    }
                }

                partsTableRowHtml += '</select>' +
                    '</td>' +
                    '<td>' +
                    '<input type="number" class="form-control" name="ServiceInstances[' + i + '].PartQuantity" min="1" step="1" onblur="calculateTotalPartsPrice()" value="' + serviceInstance.partQuantity + '" required="required" />' +
                    '</td>' +
                    '<td>' +
                    '<input type="number" class="form-control item-unit-price" min="0" step="0.01" onblur="calculateTotalPartsPrice()" name="ServiceInstances[' + i + '].PartUnitPrice" value="' + serviceInstance.partUnitPrice + '" required="required" />' +
                    '</td>' +

                    '<td>' +
                    '<input type="number" class="form-control item-price" min="0" step="0.01" onblur="calculateTotalPartsPrice()" readonly style="background-color: #f8f9fa" name="PartPrice[' + i + ']" value="' + serviceInstance.partUnitPrice * serviceInstance.partQuantity + '" required="required" />' +
                    '</td>' +
                    '<td>' +
                    '<button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red"  onclick="removeTrFromPartsTable(' + i + '); calculateTotalPartsPrice(); calculateCombinedTotalPrice();">Delete</button>' +
                    '</td>' +
                    '</tr>';
                $('#partsTable').append(partsTableRowHtml);

            }

            // Services
            for (var i = 0; i < serviceCounter; i++) {
                var serviceInstance = modelData.serviceInstances[i];
                var servicesTableRowHtml = '<tr id="servicestablerow' + i + '">' +
                    '<td>' +
                    '<select type="text" class="form-control" name="ServiceInstances[' + i + '].Service.Name" required="required">';

                // Loop through the parts using JavaScript syntax
                for (var j = 0; j < modelData.services.length; j++) {
                    var service = modelData.services[j];
                    if (service.name == serviceInstance.service.name) {
                        servicesTableRowHtml += '<option value="' + service.name + '" selected>' + service.name + '</option>';
                    } else {
                        servicesTableRowHtml += '<option value="' + service.name + '">' + service.name + '</option>';
                    }
                }

                servicesTableRowHtml += '</select>' +
                    '</td>' +
                    '<td>' +
                    '<select type="text" class="form-control" name="ServiceInstances[' + i + '].Mechanic.Name" required="required">';

                // Loop through the services using JavaScript syntax
                for (var j = 0; j < modelData.services.length; j++) {
                    var mechanic = modelData.mechanics[j];
                    if (mechanic.name == serviceInstance.mechanic.name) {
                        servicesTableRowHtml += '<option value="' + mechanic.name + '" selected>' + mechanic.name + '</option>';
                    } else {
                        servicesTableRowHtml += '<option value="' + mechanic.name + '">' + mechanic.name + '</option>';
                    }
                }
                servicesTableRowHtml += '</select>' +
                    '</td>' +
                    '<td>' +
                    '<input type="number" class="form-control service-price" min="0" step="0.01" onblur="calculateTotalServicePrice()" name="ServiceInstances[' + i + '].ServicePrice" value="' + serviceInstance.servicePrice + '" required="required" />' +
                    '</td>' +
                    '<td>' +
                    '<button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red"  onclick="removeTrFromServiceTable(' + i + '); calculateTotalServicePrice(); calculateCombinedTotalPrice();">Delete</button>' +
                    '</td>' +
                    '</tr>';
                $('#serviceSubmissionTable').append(servicesTableRowHtml);
            }
        }
    }

    $(function () {
        $('#addPart').click(function () {
            var modelData = @Html.Raw(Json.Serialize(Model));

            var partsTableRowHtml = '<tr id="partstablerow' + partsCounter + '"><td>' +
                '<select type="text" class="form-control" name="ServiceInstances[' + partsCounter + '].Part.Name" required="required">';

            partsTableRowHtml += '<option value="' + '">' + '</option>';
            // Loop through the parts using JavaScript syntax
            for (var j = 0; j < modelData.parts.length; j++) {
                var part = modelData.parts[j];
                partsTableRowHtml += '<option value="' + part.name + '">' + part.name + '</option>';
            }

            partsTableRowHtml += '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control" name="ServiceInstances[' + partsCounter + '].PartQuantity" min="1" step="1" onblur="calculateTotalPartsPrice()" required="required" />' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control item-unit-price" min="0" step="0.01" onblur="calculateTotalPartsPrice()" name="ServiceInstances[' + partsCounter + '].PartUnitPrice" required="required" />' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control item-price" onblur="calculateTotalPartsPrice()" readonly style="background-color: #f8f9fa" name="PartPrice[' + partsCounter + ']" required="required" />' +
                '</td>' +
                '<td>' +
                '<button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red"  onclick="removeTrFromPartsTable(' + partsCounter + '); calculateTotalPartsPrice(); calculateCombinedTotalPrice();">Delete</button>' +
                '</td>' +
                '</tr>';

            $(partsTableRowHtml).appendTo('#partsTable');
            partsCounter++;
            return false;
        });
        $('#addServiceBtn').click(function () {
            console.log("1");
            var modelData = @Html.Raw(Json.Serialize(Model));

            var servicesTableRowHtml = '<tr id="servicestablerow' + serviceCounter + '">' +
                '<td>' +
                '<select type="text" class="form-control" name="ServiceInstances[' + serviceCounter + '].Service.Name" required="required">';

            servicesTableRowHtml += '<option value="' + '">' + '</option>';
            // Loop through the parts using JavaScript syntax
            for (var j = 0; j < modelData.services.length; j++) {
                var service = modelData.services[j];
                servicesTableRowHtml += '<option value="' + service.name + '">' + service.name + '</option>';
            }

            console.log("2");
            console.log(modelData);
            servicesTableRowHtml += '</select>' +
                '</td>' +
                '<td>' +
                '<select type="text" class="form-control" name="ServiceInstances[' + serviceCounter + '].Mechanic.Name" required="required">';

            console.log("2.5");
            servicesTableRowHtml += '<option value="' + '">' + '</option>';
            // Loop through the services using JavaScript syntax
            console.log("2.6");
            for (var j = 0; j < modelData.mechanics.length; j++) {
                var mechanic = modelData.mechanics[j];
                servicesTableRowHtml += '<option value="' + mechanic.name + '">' + mechanic.name + '</option>';
            }
            console.log("3");
            servicesTableRowHtml += '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control service-price" min="0" step="0.01" onblur="calculateTotalServicePrice()" name="ServiceInstances[' + serviceCounter + '].ServicePrice" required="required" />' +
                '</td>' +
                '<td>' +
                '<button type="button" class="btn btn-danger delete-row" style="color:white; background-color:red"  onclick="removeTrFromServiceTable(' + serviceCounter + '); calculateTotalPrice(); calculateCombinedTotalPrice();">Delete</button>' +
                '</td>' +
                '</tr>';

            console.log("3");
            $(servicesTableRowHtml).appendTo('#serviceSubmissionTable');
            serviceCounter++;
            return false;
        });
    });

    // Function to update prices based on the selected currency
    function updatePrices() {
        var currencyRate = parseFloat($('#currency').val());
        var partsRows = document.querySelectorAll('#partsTable tr');
        partsRows.forEach(function (row, index) {
            var unitPrice = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartUnitPrice"]').value) || 0;
            var quantity = parseInt(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartQuantity"]').value) || 0;
            var totalPrice = unitPrice * quantity * currencyRate;
            row.querySelector('.form-control[name="PartPrice[' + index + ']"]').value = totalPrice.toFixed(2);
        });

        // var serviceRows = document.querySelectorAll('#serviceTableBody tr');
        // serviceRows.forEach(function (row, index) {
        //     var price = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value) || 0;
        //     var totalPrice = price * currencyRate;
        //     row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value = totalPrice.toFixed(2);
        // });

        // Recalculate total prices
        calculateTotalPartsPrice();
        // calculateTotalServicePrice();
        // calculateCombinedTotalPrice();
    }

    function calculateTotalPartsPrice() {
        var totalPrice = 0;
        var itemRows = document.querySelectorAll('#partsTable tr');
        itemRows.forEach(function (row, index) {
            var quantity = parseInt(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartQuantity"]').value) || 0;
            var unitPrice = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].PartUnitPrice"]').value) || 0;
            var price = quantity * unitPrice;
            row.querySelector('.form-control[name="PartPrice[' + index + ']"]').value = price.toFixed(2);
            totalPrice += price;
        });
        document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
        document.querySelector('input[name="PartsTotalPrice"]').value = totalPrice.toFixed(2);
        calculateCombinedTotalPrice();
    }

    function calculateTotalServicePrice() {
        var totalServicePrice = 0;
        var serviceRows = document.querySelectorAll('#serviceTableBody tr');
        serviceRows.forEach(function (row, index) {
            var price = parseFloat(row.querySelector('.form-control[name="ServiceInstances[' + index + '].ServicePrice"]').value) || 0;
            totalServicePrice += price;
        });
        document.getElementById('totalServicePrice').textContent = totalServicePrice.toFixed(2); // Display total service price
        document.querySelector('input[name="ServicesTotalPrice"]').value = totalServicePrice.toFixed(2);

        calculateCombinedTotalPrice(); // Recalculate combined total price
    }

    function calculateCombinedTotalPrice() {
        var totalItemsPrice = parseFloat(document.getElementById('totalPrice').textContent) || 0;
        var totalServicesPrice = parseFloat(document.getElementById('totalServicePrice').textContent) || 0;
        var combinedTotalPrice = totalItemsPrice + totalServicesPrice;
        document.getElementById('combinedTotalPrice').textContent = combinedTotalPrice.toFixed(2);
        document.querySelector('input[name="TotalPrice"]').value = combinedTotalPrice.toFixed(2);
    }
</script>

<script>
    var brandData = @Html.Raw(Json.Serialize(Model.Brands));

    document.addEventListener('DOMContentLoaded', function () {
        var brandSelect = document.getElementById('brandSelect');
        var modelSelect = document.getElementById('modelSelect');

        brandSelect.addEventListener('change', function () {
            chosenBrand = this.value; // Update chosenBrand variable with the selected value

            modelSelect.innerHTML = '';

            if (brandData && brandData.length > 0) {

                var defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.textContent = "";
                modelSelect.appendChild(defaultOption);

                brandData.forEach(function (brand) {
                    if (brand.name == chosenBrand) {
                        brand.models.forEach(function (model) {
                            var option = document.createElement('option');
                            option.value = model.name;
                            option.textContent = model.name;
                            modelSelect.appendChild(option);
                        });
                    }
                });
            }
        });
    });
</script>
